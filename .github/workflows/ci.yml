name: CI

on:
  push:
    branches:
      - main
      - develop
      - release/*
      - feature/*
      - bugfix/*
      - hotfix/*
  pull_request:
    branches:
      - develop
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - ready_for_review

env:
  CARGO_TERM_COLOR: always
  CLICOLOR_FORCE: 1
  IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' }}

jobs:
  commits:
    name: Conventional Commits
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - name: Setup the Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Setup the environment
        run: nix build -L --no-link .#devShells.x86_64-linux.ci
      - name: Run the commit linter
        run: nix develop .#ci --command cargo xtask check commits

  format:
    name: Code formatting and typos
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - name: Setup the Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Setup the environment
        run: nix build -L --no-link .#devShells.x86_64-linux.ci
      - name: Check the code is formatted and free of typos
        run: nix develop .#ci --command cargo xtask check format

  build:
    name: Compilation and static analysis
    runs-on: ${{ matrix.systems.runner }}
    strategy:
      matrix:
        systems:
          - system: x86_64-linux
            runner: ubuntu-latest
          - system: aarch64-darwin
            runner: macos-latest
          - system: x86_64-windows
            runner: windows-latest
    steps:
      - name: Configure Git
        run: git config --global core.autocrlf false
      - name: Clone the repository
        uses: actions/checkout@v4
      - name: Install Nix
        if: matrix.systems.system != 'x86_64-windows'
        uses: DeterminateSystems/nix-installer-action@main
      - name: Setup the Nix cache
        if: matrix.systems.system != 'x86_64-windows'
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Setup the environment
        if: matrix.systems.system != 'x86_64-windows'
        run: |
          nix build -L --no-link .#devShells.${{ matrix.systems.system }}.ci
      - name: Compile and run static analysis
        if: matrix.systems.system != 'x86_64-windows'
        run: nix develop .#ci --command cargo xtask check build
      - name: Compile and run static analysis
        if: matrix.systems.system == 'x86_64-windows'
        run: cargo xtask check build

  test:
    name: Tests
    runs-on: ${{ matrix.systems.runner }}
    strategy:
      matrix:
        systems:
          - system: x86_64-linux
            runner: ubuntu-latest
          - system: aarch64-darwin
            runner: macos-latest
          - system: x86_64-windows
            runner: windows-latest
    steps:
      - name: Configure Git
        run: git config --global core.autocrlf false
      - name: Clone the repository
        uses: actions/checkout@v4
      - name: Install Nix
        if: matrix.systems.system != 'x86_64-windows'
        uses: DeterminateSystems/nix-installer-action@main
      - name: Setup the Nix cache
        if: matrix.systems.system != 'x86_64-windows'
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Setup the environment
        if: matrix.systems.system != 'x86_64-windows'
        run: |
          nix build -L --no-link .#devShells.${{ matrix.systems.system }}.ci
      - name: Build and run the tests
        if: matrix.systems.system != 'x86_64-windows'
        run: nix develop .#ci --command cargo xtask check test
      - name: Build and run the tests
        if: matrix.systems.system == 'x86_64-windows'
        run: cargo xtask check test
